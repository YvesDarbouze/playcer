rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {
  
    function isUserSelfExcluded(userId) {
      return get(/databases/$(database)/documents/users/$(userId)).data.selfExclusion.isActive == true;
    }

    match /users/{userId} {
      allow read: if request.auth.uid == userId || request.auth.token.admin == true;
      
      allow update: if request.auth.uid == userId &&
                       request.resource.data.diff(resource.data).affectedKeys().hasOnly([
                         'displayName', 'username', 'photoURL', 
                         'responsibleGamingLimits', 'selfExclusion'
                       ]);
                       
      allow create: if false;

      allow write: if request.auth.token.admin == true;
    }

    match /bets/{betId} {
      allow read: if resource.data.isPublic == true || request.auth.uid == resource.data.creatorId || request.auth.uid == resource.data.challengerId || request.auth.token.admin == true;

      allow create: if request.auth != null && 
                       isUserSelfExcluded(request.auth.uid) == false &&
                       request.resource.data.creatorId == request.auth.uid;

      allow update: if request.auth != null && isUserSelfExcluded(request.auth.uid) == false && (
                      (resource.data.status == 'open' && request.resource.data.status == 'matched' && request.resource.data.challengerId == request.auth.uid) ||
                      (resource.data.status == 'matched' && request.resource.data.status == 'disputed')
                    ) ||
                    request.auth.token.admin == true;

      allow delete: if false;
    }

    match /games/{gameId} {
        allow read: if request.auth != null;

        match /bookmaker_odds/{bookmakerId} {
            allow read: if request.auth != null;
        }
    }

    match /transactions/{transactionId} {
      allow read: if request.auth.uid == resource.data.userId || request.auth.token.admin == true;
      allow write: if false;
    }

    match /disputes/{disputeId} {
        allow read: if request.auth.uid == resource.data.disputingUserId ||
                       get(/databases/$(database)/documents/bets/$(resource.data.betId)).data.creatorId == request.auth.uid ||
                       get(/databases/$(database)/documents/bets/$(resource.data.betId)).data.challengerId == request.auth.uid ||
                       request.auth.token.admin == true;

        allow create: if request.auth != null && request.resource.data.disputingUserId == request.auth.uid &&
                         (get(/databases/$(database)/documents/bets/$(request.resource.data.betId)).data.creatorId == request.auth.uid ||
                          get(/databases/$(database)/documents/bets/$(request.resource.data.betId)).data.challengerId == request.auth.uid);

        allow update: if false;
        allow delete: if false;
    }
  }
}
