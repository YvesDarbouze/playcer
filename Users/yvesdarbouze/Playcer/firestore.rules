rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {
    
    // --- Helper Functions ---
    function isSignedIn() {
      return request.auth != null;
    }

    function isOwner(userId) {
      return request.auth.uid == userId;
    }
    
    function getUserData(userId) {
      return get(/databases/$(database)/documents/users/$(userId)).data;
    }

    function isKycVerified(userId) {
        return getUserData(userId).kycStatus == 'verified';
    }


    // --- Collections ---

    match /users/{userId} {
      // Anyone can read a user's public profile data
      allow get: if true;
      // Only the user themselves can create their profile or update it
      allow create, update: if isOwner(userId);
      // Users cannot be deleted from the client
      allow delete: if false;
    }

    match /games/{gameId} {
      // All game and odds data is public
      allow get: if true;
      allow list: if true;

      // Only backend processes can write game data
      allow write: if false;

      match /bookmaker_odds/{bookmakerId} {
        allow get: if true;
        allow list: if true;
        allow write: if false;
      }
    }

    match /bets/{betId} {
      // Only signed-in users who are KYC verified can create bets
      allow create: if isSignedIn() && isKycVerified(request.auth.uid);
      
      // Allow read access for creator, taker, or if the bet is public and pending
      allow get: if isSignedIn() && 
                    (resource.data.creatorId == request.auth.uid || 
                     resource.data.takerId == request.auth.uid ||
                     (resource.data.isPublic == true && resource.data.status == 'pending'));
                     
      allow list: if isSignedIn();

      // Only the intended taker can update a bet to accept it
      // Other status updates are handled by backend functions
      allow update: if isSignedIn() &&
                       request.resource.data.takerId == request.auth.uid &&
                       resource.data.takerId == null &&
                       resource.data.status == 'pending';
                       
      // Bets cannot be deleted from the client
      allow delete: if false;
    }

    match /transactions/{transactionId} {
      // Users can only read their own transactions
      allow get: if isSignedIn() && resource.data.userId == request.auth.uid;
      allow list: if isSignedIn() && request.query.where.size() > 0 && request.query.where[0][2] == request.auth.uid;
      
      // Transactions are only created by the backend
      allow write: if false;
    }
  }
}
