
rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // Users can read public profile data of other users.
    // A user can only read/write their own private data.
    match /users/{userId} {
      allow read: if request.auth != null;
      allow write: if request.auth.uid == userId;

      // Users can only read their own transactions.
      match /transactions/{transactionId} {
        allow read, write: if request.auth.uid == userId;
      }
    }

    // Game and odds data is public and read-only for clients.
    // It should only be written by a trusted backend process.
    match /games/{gameId} {
      allow read: if true;
      allow write: if false; // Managed by backend functions

      match /bookmaker_odds/{bookmakerId} {
        allow read: if true;
        allow write: if false; // Managed by backend functions
      }
    }

    // Rules for bets
    match /bets/{betId} {
      // Anyone can read a public bet. Private bets are restricted.
      allow read: if resource.data.isPublic == true || request.auth.uid == resource.data.creatorId || request.auth.uid == resource.data.takerId;
      
      // Users can create bets if they are authenticated.
      allow create: if request.auth != null;

      // Only the creator can cancel a pending bet.
      // Only the intended taker can accept a bet.
      // Both parties can update a bet to a 'disputed' state.
      allow update: if 
        (request.resource.data.status == 'cancelled' && request.auth.uid == resource.data.creatorId) ||
        (request.resource.data.status == 'accepted' && request.auth.uid == resource.data.takerId && resource.data.takerId == null) ||
        (request.resource.data.status == 'disputed' && (request.auth.uid == resource.data.creatorId || request.auth.uid == resource.data.takerId));
        
       // A user cannot delete a bet.
       allow delete: if false;
    }

    // Disputes can only be created by the parties involved in the bet.
    // They are read-only for users and managed by an admin.
    match /disputes/{disputeId} {
        allow create: if request.auth.uid == request.resource.data.disputingUserId &&
                        (get(/databases/$(database)/documents/bets/$(request.resource.data.betId)).data.creatorId == request.auth.uid ||
                         get(/databases/$(database)/documents/bets/$(request.resource.data.betId)).data.takerId == request.auth.uid);
        allow read, update, delete: if false; // Managed by admin backend
    }
  }
}
