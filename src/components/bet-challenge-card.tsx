// This is an autogenerated file from Firebase Studio. Do not edit.
"use client";

import * as React from "react";
import { format } from "date-fns";
import { User as FirebaseUser } from "firebase/auth";
import {
  Card,
  CardContent,
  CardDescription,
  CardFooter,
  CardHeader,
  CardTitle,
} from "@/components/ui/card";
import { Button } from "@/components/ui/button";
import { Avatar, AvatarFallback, AvatarImage } from "@/components/ui/avatar";
import { Separator } from "@/components/ui/separator";
import { Badge } from "@/components/ui/badge";
import { Handshake, Share2, Swords } from "lucide-react";
import type { Bet } from "@/types";
import { cn } from "@/lib/utils";
import { LoginButton } from "./login-button";
import { useToast } from "@/hooks/use-toast";

interface BetChallengeCardProps {
  bet: Bet;
  currentUser: FirebaseUser | null;
  onAccept: () => void;
  isAccepting: boolean;
}

const TeamDisplay = ({
  team,
  isWinner,
}: {
  team: string;
  isWinner?: boolean;
}) => (
  <div
    className={cn(
      "text-center transition-all duration-300",
      isWinner === false && "opacity-40"
    )}
  >
    <p className="text-2xl font-headline font-black">{team}</p>
  </div>
);

const UserDisplay = ({
  username,
  photoURL,
  isCreator,
}: {
  username: string;
  photoURL: string;
  isCreator?: boolean;
}) => (
  <div
    className={cn(
      "flex flex-col items-center gap-2",
      isCreator ? "items-end" : "items-start"
    )}
  >
    <Avatar className="size-16 border-2 border-primary">
      <AvatarImage src={photoURL} alt={username} />
      <AvatarFallback>{username.charAt(0)}</AvatarFallback>
    </Avatar>
    <p className="font-bold">@{username}</p>
  </div>
);

const BetDetail = ({ label, value }: { label: string; value: React.ReactNode }) => (
    <div className="flex justify-between items-center text-sm">
        <p className="text-muted-foreground">{label}</p>
        <p className="font-bold">{value}</p>
    </div>
)

export function BetChallengeCard({
  bet,
  currentUser,
  onAccept,
  isAccepting,
}: BetChallengeCardProps) {

  const { toast } = useToast();
  const canAccept = currentUser && currentUser.uid !== bet.creatorId && bet.status === 'open';
  const isCreator = currentUser && currentUser.uid === bet.creatorId;

  const handleShareBet = async () => {
    const shareData = {
      title: 'Playcer Bet Challenge',
      text: `I've challenged someone to a bet on ${bet.awayTeam} vs ${bet.homeTeam}. Do you have what it takes to accept?`,
      url: window.location.href,
    };
    try {
      if (navigator.share) {
        await navigator.share(shareData);
        toast({ title: 'Challenge shared!' });
      } else {
         navigator.clipboard.writeText(window.location.href);
         toast({ title: "Link Copied!", description: "Challenge link copied to clipboard." });
      }
    } catch (error) {
      console.error('Error sharing bet:', error);
      toast({
        title: 'Sharing failed',
        description: 'Could not share the challenge at this time.',
        variant: 'destructive',
      });
    }
  };


  const renderActionButton = () => {
    if (!currentUser) {
        return <div className="flex flex-col gap-2 items-center">
            <p className="text-sm text-muted-foreground">You must be logged in to participate.</p>
            <LoginButton />
        </div>
    }
    if (canAccept) {
      return (
        <Button onClick={onAccept} disabled={isAccepting} className="w-full" size="lg">
          <Handshake className="mr-2" />
          {isAccepting ? "Accepting..." : "Accept Bet"}
        </Button>
      );
    }
    if (isCreator && bet.status === 'open') {
      return (
        <Button onClick={handleShareBet} className="w-full" size="lg" variant="secondary">
          <Share2 className="mr-2" />
          Share Challenge
        </Button>
      );
    }
    return null; // Or some other state like "Bet already matched"
  };

  return (
    <Card className="w-full max-w-2xl shadow-2xl">
      <CardHeader className="text-center bg-muted/30 p-4">
        <Badge variant={bet.status === 'open' ? 'default' : 'secondary'} className="mx-auto w-fit mb-2">
            {bet.status.charAt(0).toUpperCase() + bet.status.slice(1)}
        </Badge>
        <CardTitle className="text-lg">
            {bet.sportKey.replace(/_/g, ' ').toUpperCase()}
        </CardTitle>
        <CardDescription>
            {format(new Date(bet.eventDate), "EEE, MMM d, yyyy 'at' h:mm a")}
        </CardDescription>
      </CardHeader>
      <CardContent className="p-6">
        <div className="grid grid-cols-3 items-center text-center mb-6">
            <UserDisplay username={bet.creatorUsername} photoURL={bet.creatorPhotoURL} isCreator />
             <div className="flex flex-col items-center">
                <TeamDisplay team={bet.homeTeam} />
                <Swords className="text-muted-foreground my-2" />
                <TeamDisplay team={bet.awayTeam} />
            </div>
            {bet.challengerId ? (
                 <UserDisplay username={bet.challengerUsername!} photoURL={bet.challengerPhotoURL!} />
            ): (
                 <div className="flex flex-col items-center gap-2 text-muted-foreground">
                    <Avatar className="size-16 border-2 border-dashed">
                        <AvatarFallback>?</AvatarFallback>
                    </Avatar>
                    <p className="font-bold">Open Challenge</p>
                </div>
            )}
        </div>

        <Separator className="my-4" />

        <div className="space-y-2">
            <BetDetail label="Bet Type" value={bet.betType.charAt(0).toUpperCase() + bet.betType.slice(1)} />
            <BetDetail label="Creator's Pick" value={bet.teamSelection} />
            {bet.line ? <BetDetail label="Line" value={bet.line} /> : null}
            <BetDetail label="Wager" value={`$${bet.stake.toFixed(2)}`} />
        </div>
      </CardContent>
      <CardFooter className="p-4 bg-muted/30">
        {renderActionButton()}
      </CardFooter>
    </Card>
  );
}
