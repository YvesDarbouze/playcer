// This is an autogenerated file from Firebase Studio.
"use client";

import * as React from "react";
import { useRouter } from "next/navigation";
import { getFirestore, collection, query, where, onSnapshot, doc, getDoc, Timestamp } from "firebase/firestore";
import { getFirebaseApp } from "@/lib/firebase";
import { useToast } from "@/hooks/use-toast";
import type { Dispute, Bet } from "@/types";
import {
  Table,
  TableBody,
  TableCell,
  TableHead,
  TableHeader,
  TableRow,
} from "@/components/ui/table";
import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/card";
import { Skeleton } from "@/components/ui/skeleton";
import { format } from "date-fns";

type EnrichedDispute = Dispute & {
    creatorDisplayName?: string;
    takerDisplayName?: string;
}

export function DisputeResolutionTable() {
    const router = useRouter();
    const { toast } = useToast();
    const [disputes, setDisputes] = React.useState<EnrichedDispute[]>([]);
    const [loading, setLoading] = React.useState(true);

    React.useEffect(() => {
        const db = getFirestore(getFirebaseApp());
        const q = query(
            collection(db, "disputes"),
            where("status", "==", "open")
        );

        const unsubscribe = onSnapshot(q, async (querySnapshot) => {
            setLoading(true);
            const openDisputes: EnrichedDispute[] = [];
            
            for (const disputeDoc of querySnapshot.docs) {
                const disputeData = { id: disputeDoc.id, ...disputeDoc.data() } as Dispute;
                
                // Fetch related bet to get party names
                const betRef = doc(db, "bets", disputeData.betId);
                const betSnap = await getDoc(betRef);
                
                let enrichedDispute: EnrichedDispute = { ...disputeData };
                if (betSnap.exists()) {
                    const betData = betSnap.data() as Bet;
                    enrichedDispute.creatorDisplayName = betData.creatorUsername;
                    enrichedDispute.takerDisplayName = betData.challengerUsername;
                }
                openDisputes.push(enrichedDispute);
            }
            
            setDisputes(openDisputes);
            setLoading(false);

        }, (error) => {
            console.error("Error fetching disputes:", error);
            toast({ title: "Error", description: "Could not fetch open disputes.", variant: "destructive" });
            setLoading(false);
        });

        return () => unsubscribe();
    }, [toast]);
    
    const handleRowClick = (disputeId: string) => {
        // This will navigate to a detailed dispute page that we can build next
        // router.push(`/admin/disputes/${disputeId}`);
        toast({ title: "Note:", description: `Navigation to dispute ${disputeId} page is not yet implemented.`});
    };

    if (loading) {
        return (
            <Card>
                <CardHeader><CardTitle className="font-bold">Open Disputes</CardTitle></CardHeader>
                <CardContent>
                    <div className="space-y-2">
                        {[...Array(3)].map((_, i) => <Skeleton key={i} className="h-12 w-full" />)}
                    </div>
                </CardContent>
            </Card>
        );
    }
    
    if (disputes.length === 0) {
        return (
            <Card>
                <CardHeader><CardTitle className="font-bold">Open Disputes</CardTitle></CardHeader>
                <CardContent>
                    <p className="text-center text-muted-foreground py-8">No open disputes found.</p>
                </CardContent>
            </Card>
        );
    }

    return (
        <Card>
            <CardHeader>
                <CardTitle className="font-bold">Open Disputes</CardTitle>
            </CardHeader>
            <CardContent>
                <Table>
                    <TableHeader>
                        <TableRow>
                            <TableHead>Bet ID</TableHead>
                            <TableHead>Parties Involved</TableHead>
                            <TableHead>Reason</TableHead>
                            <TableHead>Date Opened</TableHead>
                        </TableRow>
                    </TableHeader>
                    <TableBody>
                        {disputes.map((dispute) => (
                            <TableRow key={dispute.id} onClick={() => handleRowClick(dispute.id)} className="cursor-pointer">
                                <TableCell className="font-mono text-xs">{dispute.betId}</TableCell>
                                <TableCell>
                                    <div className="font-medium">
                                        {dispute.creatorDisplayName} vs. {dispute.takerDisplayName}
                                    </div>
                                </TableCell>
                                <TableCell className="max-w-xs truncate">{dispute.reason}</TableCell>
                                <TableCell>{format(new Date((dispute.createdAt as unknown as Timestamp).toDate()), "MMM d, yyyy, p")}</TableCell>
                            </TableRow>
                        ))}
                    </TableBody>
                </Table>
            </CardContent>
        </Card>
    );
}
