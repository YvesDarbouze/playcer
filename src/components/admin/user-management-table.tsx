// This is an autogenerated file from Firebase Studio.
"use client";

import * as React from "react";
import { getFunctions, httpsCallable } from "firebase/functions";
import { getFirebaseApp } from "@/lib/firebase";
import { useToast } from "@/hooks/use-toast";
import {
  Table,
  TableBody,
  TableCell,
  TableHead,
  TableHeader,
  TableRow,
} from "@/components/ui/table";
import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/card";
import { Button } from "@/components/ui/button";
import { Input } from "@/components/ui/input";
import { Skeleton } from "@/components/ui/skeleton";
import { User, Shield, Trash2, Ban, Undo, CircleDollarSign } from "lucide-react";
import { format } from "date-fns";

type AdminUser = {
    uid: string;
    email?: string;
    displayName?: string;
    photoURL?: string;
    disabled: boolean;
    creationTime: string;
    lastSignInTime: string;
    isAdmin: boolean;
};

export function UserManagementTable() {
    const { toast } = useToast();
    const [users, setUsers] = React.useState<AdminUser[]>([]);
    const [loading, setLoading] = React.useState(true);
    const [searchTerm, setSearchTerm] = React.useState("");
    const [isSubmitting, setIsSubmitting] = React.useState<Record<string, boolean>>({});


    const functions = getFunctions(getFirebaseApp());
    const listAllUsers = httpsCallable(functions, 'listAllUsers');
    const suspendUser = httpsCallable(functions, 'suspendUser');
    const deleteUser = httpsCallable(functions, 'deleteUser');
    const issueManualRefund = httpsCallable(functions, 'issueManualRefund');

    const fetchUsers = React.useCallback(async () => {
        setLoading(true);
        try {
            const result: any = await listAllUsers();
            if (result.data.success) {
                setUsers(result.data.users);
            } else {
                throw new Error('Failed to list users');
            }
        } catch (error: any) {
            toast({ title: "Error", description: error.message, variant: "destructive" });
        } finally {
            setLoading(false);
        }
    }, [listAllUsers, toast]);

    React.useEffect(() => {
        fetchUsers();
    }, [fetchUsers]);
    
    const handleAction = async (action: (data: any) => Promise<any>, payload: any, uid: string, actionName: string) => {
        setIsSubmitting(prev => ({ ...prev, [`${actionName}-${uid}`]: true }));
        try {
            const result: any = await action(payload);
            if (result.data.success) {
                toast({ title: "Success", description: result.data.message });
                fetchUsers(); // Refresh the user list
            } else {
                throw new Error(result.data.message || `Failed to ${actionName}`);
            }
        } catch (error: any) {
             toast({ title: "Error", description: error.message, variant: "destructive" });
        } finally {
            setIsSubmitting(prev => ({ ...prev, [`${actionName}-${uid}`]: false }));
        }
    };
    
    const handleSuspend = (uid: string, shouldSuspend: boolean) => {
        handleAction(suspendUser, { uid, suspend: shouldSuspend }, uid, shouldSuspend ? 'suspend' : 'unsuspend');
    };
    
    const handleDelete = (uid: string) => {
        if (window.confirm("Are you sure you want to permanently delete this user? This action cannot be undone.")) {
            handleAction(deleteUser, { uid }, uid, 'delete');
        }
    };

    const handleRefund = (uid: string) => {
        const betId = window.prompt("Enter the Bet ID to refund:");
        if (betId) {
            handleAction(issueManualRefund, { userId: uid, betId }, uid, 'refund');
        }
    };


    const filteredUsers = users.filter(user => 
        user.displayName?.toLowerCase().includes(searchTerm.toLowerCase()) ||
        user.email?.toLowerCase().includes(searchTerm.toLowerCase()) ||
        user.uid.toLowerCase().includes(searchTerm.toLowerCase())
    );

    return (
        <Card>
            <CardHeader>
                <CardTitle className="flex justify-between items-center font-bold">
                    User Management
                    <Input 
                        placeholder="Search users..."
                        value={searchTerm}
                        onChange={(e) => setSearchTerm(e.target.value)}
                        className="w-full max-w-sm"
                    />
                </CardTitle>
            </CardHeader>
            <CardContent>
                 {loading ? (
                    <div className="space-y-2">
                        {[...Array(5)].map((_, i) => <Skeleton key={i} className="h-12 w-full" />)}
                    </div>
                 ) : (
                    <Table>
                        <TableHeader>
                            <TableRow>
                                <TableHead>User</TableHead>
                                <TableHead>Status</TableHead>
                                <TableHead>Joined</TableHead>
                                <TableHead>Last Sign-In</TableHead>
                                <TableHead className="text-right">Actions</TableHead>
                            </TableRow>
                        </TableHeader>
                        <TableBody>
                            {filteredUsers.map((user) => (
                                <TableRow key={user.uid}>
                                    <TableCell className="font-medium">{user.displayName || user.email || user.uid}</TableCell>
                                    <TableCell>
                                        {user.disabled ? <Ban className="text-destructive" /> : <Shield className="text-green-500" />}
                                        {user.isAdmin && <span className="ml-2 font-bold text-primary">Admin</span>}
                                    </TableCell>
                                    <TableCell>{format(new Date(user.creationTime), 'MMM d, yyyy')}</TableCell>
                                    <TableCell>{user.lastSignInTime ? format(new Date(user.lastSignInTime), 'MMM d, yyyy, p') : 'Never'}</TableCell>
                                    <TableCell className="text-right space-x-2">
                                         <Button variant="outline" size="sm" onClick={() => handleRefund(user.uid)} disabled={isSubmitting[`refund-${user.uid}`]}>
                                            <CircleDollarSign className="mr-2" /> Refund
                                        </Button>
                                        {user.disabled ? (
                                            <Button variant="outline" size="sm" onClick={() => handleSuspend(user.uid, false)} disabled={isSubmitting[`unsuspend-${user.uid}`]}>
                                               <Undo className="mr-2"/> Unsuspend
                                            </Button>
                                        ) : (
                                            <Button variant="secondary" size="sm" onClick={() => handleSuspend(user.uid, true)} disabled={isSubmitting[`suspend-${user.uid}`]}>
                                               <Ban className="mr-2" /> Suspend
                                            </Button>
                                        )}
                                        <Button variant="destructive" size="sm" onClick={() => handleDelete(user.uid)} disabled={isSubmitting[`delete-${user.uid}`]}>
                                            <Trash2 className="mr-2" /> Delete
                                        </Button>
                                    </TableCell>
                                </TableRow>
                            ))}
                        </TableBody>
                    </Table>
                 )}
            </CardContent>
        </Card>
    )
}
