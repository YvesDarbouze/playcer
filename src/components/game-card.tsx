// This is an autogenerated file from Firebase Studio. Do not edit.
"use client";

import * as React from 'react';
import Image from 'next/image';
import { format } from 'date-fns';
import { Card, CardContent, CardFooter } from "@/components/ui/card";
import { Button } from './ui/button';
import { Swords } from 'lucide-react';
import { BetCreationModal } from './bet-creation-modal';
import type { Game } from '@/types';
import { useAuth } from '@/hooks/use-auth';
import { useToast } from '@/hooks/use-toast';
import { LoginButton } from './login-button';
import { getTeamLogoUrl } from '@/lib/team-logo-helper';

interface GameCardProps {
    game: Game;
}

export function GameCard({ game }: GameCardProps) {
    const [isModalOpen, setIsModalOpen] = React.useState(false);
    const { user, loading } = useAuth();
    const { toast } = useToast();
    const [gameTime, setGameTime] = React.useState<Date | null>(null);

    React.useEffect(() => {
        // Set the date on the client to avoid hydration mismatch
        setGameTime(new Date(game.commence_time));
    }, [game.commence_time]);

    const handleCreateBetClick = (e: React.MouseEvent) => {
        e.preventDefault(); // Prevent link navigation if card is wrapped in <a>
        if (!user && !loading) {
             toast({
                title: "Authentication Required",
                description: (
                    <div className="flex flex-col gap-4 items-center">
                        <p>You must be logged in to create a bet.</p>
                        <LoginButton />
                    </div>
                ),
            });
        } else if (user) {
            setIsModalOpen(true);
        }
    };

    const homeLogo = getTeamLogoUrl(game.home_team, game.sport_key);
    const awayLogo = getTeamLogoUrl(game.away_team, game.sport_key);

    return (
        <>
            <Card className="hover:shadow-lg transition-shadow duration-200 flex flex-col overflow-hidden">
                <CardContent className="p-4 flex-grow flex flex-col items-center justify-center">
                    <div className="flex justify-around items-center w-full mb-4">
                        <div className="flex flex-col items-center gap-2 text-center w-2/5">
                            <Image src={awayLogo} alt={`${game.away_team} logo`} width={80} height={80} className="h-20 w-auto"/>
                            <p className="font-bold text-sm truncate">{game.away_team}</p>
                        </div>
                        <div className="text-muted-foreground font-bold text-2xl">@</div>
                        <div className="flex flex-col items-center gap-2 text-center w-2/5">
                            <Image src={homeLogo} alt={`${game.home_team} logo`} width={80} height={80} className="h-20 w-auto"/>
                            <p className="font-bold text-sm truncate">{game.home_team}</p>
                        </div>
                    </div>
                     {gameTime ? (
                        <div className="text-center text-muted-foreground text-sm">
                            <p>{format(gameTime, "EEE, MMM d")}</p>
                            <p className="font-semibold">{format(gameTime, "h:mm a")}</p>
                        </div>
                    ) : (
                        <div className="flex flex-col items-center gap-1">
                            <div className="h-4 w-24 bg-muted rounded animate-pulse" />
                            <div className="h-4 w-16 bg-muted rounded animate-pulse" />
                        </div>
                    )}
                </CardContent>
                <CardFooter className="p-2 bg-muted/50">
                     <Button onClick={handleCreateBetClick} disabled={loading} className="w-full">
                        <Swords className="mr-2 h-4 w-4" />
                        {loading ? 'Checking Auth...' : 'Create Bet'}
                    </Button>
                </CardFooter>
            </Card>
            {user && gameTime && (
                 <BetCreationModal
                    isOpen={isModalOpen}
                    onOpenChange={setIsModalOpen}
                    game={game}
                />
            )}
        </>
    );
}
