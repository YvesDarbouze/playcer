// This is an autogenerated file from Firebase Studio. Do not edit.
"use client";

import * as React from "react";
import { useForm } from "react-hook-form";
import { zodResolver } from "@hookform/resolvers/zod";
import { z } from "zod";
import { getFunctions, httpsCallable } from "firebase/functions";
import {
  Dialog,
  DialogContent,
  DialogHeader,
  DialogTitle,
  DialogDescription,
  DialogFooter,
} from "@/components/ui/dialog";
import {
  Form,
  FormControl,
  FormField,
  FormItem,
  FormLabel,
  FormMessage,
} from "@/components/ui/form";
import {
  Select,
  SelectContent,
  SelectItem,
  SelectTrigger,
  SelectValue,
} from "@/components/ui/select";
import { Input } from "@/components/ui/input";
import { Button } from "@/components/ui/button";
import { useToast } from "@/hooks/use-toast";
import { useAuth } from "@/hooks/use-auth";
import type { Game } from "@/types";
import { ClipboardCopy } from "lucide-react";

interface BetCreationModalProps {
  isOpen: boolean;
  onOpenChange: (isOpen: boolean) => void;
  game: Game;
}

const betSchema = z.object({
  betType: z.enum(["moneyline", "spread", "total"]),
  teamSelection: z.string().min(1, "Please select a team."),
  line: z.coerce.number().optional(),
  stake: z.coerce.number().min(1, "Stake must be at least 1."),
});

type BetFormData = z.infer<typeof betSchema>;

export function BetCreationModal({ isOpen, onOpenChange, game }: BetCreationModalProps) {
  const { user } = useAuth();
  const { toast } = useToast();
  const [isLoading, setIsLoading] = React.useState(false);
  const [challengeLink, setChallengeLink] = React.useState<string | null>(null);

  const form = useForm<BetFormData>({
    resolver: zodResolver(betSchema),
    defaultValues: {
      betType: "moneyline",
      stake: 10,
    },
  });

  const betType = form.watch("betType");

  const onSubmit = async (data: BetFormData) => {
    if (!user) {
      toast({
        title: "Error",
        description: "You must be logged in to create a bet.",
        variant: "destructive",
      });
      return;
    }
    setIsLoading(true);
    setChallengeLink(null);

    const functions = getFunctions();
    const createBet = httpsCallable(functions, 'createBet');

    try {
       const betPayload = {
        ...data,
        sportKey: game.sport_key,
        eventId: game.id,
        eventDate: game.commence_time,
        homeTeam: game.home_team,
        awayTeam: game.away_team,
        odds: 100, // Placeholder
      };

      const result: any = await createBet(betPayload);

      if (result.data.success) {
        setChallengeLink(result.data.uniqueLink);
        toast({
          title: "Bet Created Successfully!",
          description: "Your challenge link is ready to be shared.",
        });
        form.reset();
      } else {
        throw new Error(result.data.error || "Failed to create bet.");
      }
    } catch (error: any) {
      console.error("Error creating bet:", error);
      toast({
        title: "Error",
        description: error.message || "An unexpected error occurred.",
        variant: "destructive",
      });
    } finally {
      setIsLoading(false);
    }
  };
  
   const handleCopyToClipboard = () => {
    if (challengeLink) {
      navigator.clipboard.writeText(challengeLink);
      toast({ title: "Copied to clipboard!" });
    }
  };
  
  const handleModalClose = (open: boolean) => {
    if (!open) {
        form.reset();
        setChallengeLink(null);
    }
    onOpenChange(open);
  }

  return (
    <Dialog open={isOpen} onOpenChange={handleModalClose}>
      <DialogContent className="sm:max-w-[425px]">
        <DialogHeader>
          <DialogTitle>Create Bet</DialogTitle>
          <DialogDescription>
            {game.away_team} @ {game.home_team}
          </DialogDescription>
        </DialogHeader>
        {challengeLink ? (
          <div className="space-y-4 py-4">
             <h3 className="font-headline font-black text-lg text-center">Share Your Challenge!</h3>
             <p className="text-sm text-center text-muted-foreground">Copy the link below and send it to a friend.</p>
             <div className="flex items-center space-x-2">
                <Input value={challengeLink} readOnly />
                <Button onClick={handleCopyToClipboard} size="icon">
                    <ClipboardCopy className="h-4 w-4" />
                </Button>
            </div>
             <Button onClick={() => handleModalClose(false)} className="w-full">Done</Button>
          </div>
        ) : (
          <Form {...form}>
            <form onSubmit={form.handleSubmit(onSubmit)} className="space-y-4">
              <FormField
                control={form.control}
                name="betType"
                render={({ field }) => (
                  <FormItem>
                    <FormLabel>Bet Type</FormLabel>
                    <Select onValueChange={field.onChange} defaultValue={field.value}>
                      <FormControl>
                        <SelectTrigger>
                          <SelectValue placeholder="Select a bet type" />
                        </SelectTrigger>
                      </FormControl>
                      <SelectContent>
                        <SelectItem value="moneyline">Straight Bet (Moneyline)</SelectItem>
                        <SelectItem value="spread">Point Spread</SelectItem>
                        <SelectItem value="total">Over/Under (Total)</SelectItem>
                      </SelectContent>
                    </Select>
                    <FormMessage />
                  </FormItem>
                )}
              />

              <FormField
                control={form.control}
                name="teamSelection"
                render={({ field }) => (
                  <FormItem>
                    <FormLabel>Your Pick</FormLabel>
                     <Select onValueChange={field.onChange} defaultValue={field.value}>
                       <FormControl>
                        <SelectTrigger>
                          <SelectValue placeholder="Select your team/pick" />
                        </SelectTrigger>
                      </FormControl>
                      <SelectContent>
                        {betType === 'total' ? (
                            <>
                                <SelectItem value="over">Over</SelectItem>
                                <SelectItem value="under">Under</SelectItem>
                            </>
                        ) : (
                            <>
                                <SelectItem value={game.home_team}>{game.home_team}</SelectItem>
                                <SelectItem value={game.away_team}>{game.away_team}</SelectItem>
                            </>
                        )}
                      </SelectContent>
                    </Select>
                    <FormMessage />
                  </FormItem>
                )}
              />

              {(betType === "spread" || betType === "total") && (
                <FormField
                  control={form.control}
                  name="line"
                  render={({ field }) => (
                    <FormItem>
                      <FormLabel>{betType === 'spread' ? 'Point Spread' : 'Total'}</FormLabel>
                      <FormControl>
                        <Input type="number" step="0.5" placeholder="Enter the line" {...field} className="font-headline font-black" />
                      </FormControl>
                      <FormMessage />
                    </FormItem>
                  )}
                />
              )}

              <FormField
                control={form.control}
                name="stake"
                render={({ field }) => (
                  <FormItem>
                    <FormLabel>Wager Amount ($)</FormLabel>
                    <FormControl>
                      <Input type="number" placeholder="Enter your stake" {...field} className="font-headline font-black" />
                    </FormControl>
                    <FormMessage />
                  </FormItem>
                )}
              />
              <DialogFooter>
                <Button type="submit" disabled={isLoading} className="w-full">
                  {isLoading ? "Creating Bet..." : "Create Bet & Get Link"}
                </Button>
              </DialogFooter>
            </form>
          </Form>
        )}
      </DialogContent>
    </Dialog>
  );
}
