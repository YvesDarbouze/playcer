rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {
    
    // User data rules
    match /users/{userId} {
      // CREATE: A user can only create their own document, and only if one doesn't already exist.
      allow create: if request.auth.uid == userId && !exists(/databases/$(database)/documents/users/$(userId));

      // READ: An authenticated user can read their own full document.
      allow get: if request.auth.uid == userId;

      // READ (Public): Any authenticated user can read specific public fields of any other user.
      allow list, get: if request.auth != null && 
                       request.query.keys.hasOnly(['displayName', 'username', 'photoURL', 'wins', 'losses']);

      // UPDATE: An authenticated user can only update their own document, and cannot modify protected fields.
      allow update: if request.auth.uid == userId &&
                     !('walletBalance' in request.resource.data) &&
                     !('wins' in request.resource.data) &&
                     !('losses' in request.resource.data);

      // DELETE: Not allowed for any user.
      allow delete: if false;
    }

    // Bet data rules
    match /bets/{betId} {
      // READ: Any user can read any bet.
      allow read: if true;

      // CREATE: An authenticated user can create a bet.
      // The bet must have the correct creatorId, an 'open' status, and null challenger/winner fields.
      allow create: if request.auth != null &&
                     request.resource.data.creatorId == request.auth.uid &&
                     request.resource.data.status == 'open' &&
                     request.resource.data.challengerId == null &&
                     request.resource.ddata.winnerId == null;

      // UPDATE: Handles accepting a bet challenge.
      // A user can only accept if they are authenticated, the bet is 'open', and they are not the creator.
      // They can only modify the challenger fields and the status to 'matched'.
      allow update: if request.auth != null &&
                     resource.data.status == 'open' &&
                     request.resource.data.status == 'matched' &&
                     request.resource.data.challengerId == request.auth.uid &&
                     request.auth.uid != resource.data.creatorId &&
                     request.resource.data.diff(resource.data).affectedKeys().hasOnly([
                       'challengerId', 'challengerUsername', 'challengerPhotoURL', 'status'
                     ]);
      
      // DELETE: Not allowed.
      allow delete: if false;
    }
  }
}
