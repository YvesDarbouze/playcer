rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // Helper functions
    function isOwner(userId) {
      return request.auth != null && request.auth.uid == userId;
    }

    function isVerified(userId) {
      return get(/databases/$(database)/documents/users/$(userId)).data.kycStatus == 'verified';
    }
    
    // Deny all reads and writes by default
    match /{document=**} {
      allow read, write: if false;
    }

    // USERS: Users can read their own data and limited public data of others.
    // They can only update non-critical fields on their own profile.
    match /users/{userId} {
      // Any authenticated user can read public profile data
      allow get: if request.auth != null;
      // A user can list their own data (e.g., in the auth hook)
      allow list: if isOwner(userId);
      // A user can create their own profile document
      allow create: if isOwner(userId)
                    && request.resource.data.username is string
                    && request.resource.data.walletBalance == 100.00
                    && request.resource.data.kycStatus == 'verified'; // KYC is auto-verified for demo
      // A user can update their displayName, photoURL, and responsible gaming settings
      allow update: if isOwner(userId)
                    && request.resource.data.keys().hasOnly(['displayName', 'photoURL', 'responsibleGamingLimits', 'selfExclusion']);
    }

    // GAMES: Publicly readable, but only writable from the backend.
    match /games/{gameId} {
      allow get: if true;
      allow list: if true;
      
      // Odds are nested, same rules apply
      match /bookmaker_odds/{bookmaker} {
        allow get: if true;
        allow list: if true;
      }
    }

    // BETS: Users can create bets if verified. They can accept bets.
    // Backend handles status changes to 'completed' or 'void'.
    match /bets/{betId} {
      // Anyone can view a bet's details.
      allow get: if true;
      // Allow searching/listing of bets in the marketplace.
      allow list: if true;

      // Creating a new bet
      allow create: if isOwner(request.resource.data.challengerId)
                    && isVerified(request.resource.data.challengerId)
                    && request.resource.data.wagerAmount > 0
                    && request.resource.data.status == 'pending_acceptance';
      
      // Accepting a bet
      allow update: if request.auth != null
                    && isVerified(request.auth.uid)
                    && request.resource.data.status == 'active'
                    && resource.data.status == 'pending_acceptance' // Can only transition from pending
                    && request.resource.data.recipientId == request.auth.uid; // Must be the intended recipient
    }

    // TRANSACTIONS: Read-only for the owner. All writes must come from the backend.
    match /transactions/{transactionId} {
      allow read: if isOwner(resource.data.userId);
    }
    
    // DISPUTES: Read-only for involved parties and admins. Writes only by backend/admins.
    match /disputes/{disputeId} {
        allow get: if isOwner(resource.data.disputingUserId) || get(/databases/$(database)/documents/users/$(request.auth.uid)).data.isAdmin == true;
        // Creating a dispute
        allow create: if isOwner(request.resource.data.disputingUserId);
    }
  }
}
