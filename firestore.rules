rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // --- Utility Functions ---
    function isOwner(userId) {
      return request.auth != null && request.auth.uid == userId;
    }

    function isAdmin() {
      return request.auth != null && request.auth.token.admin == true;
    }

    function isServer() {
      // Insecure: In a real app, you'd want a more robust way to identify server calls
      // e.g., using a specific service account. For this project, we check for null auth
      // which is typical for Admin SDK calls.
      return request.auth == null;
    }

    // --- Users Collection ---
    match /users/{userId} {
      // READ: 
      // - Any authenticated user can read public profile info (displayName, photoURL, wins, losses, username).
      // - A user can read their own full document.
      // - An admin can read any user's full document.
      allow read: if request.auth != null && (isOwner(userId) || isAdmin());

      // CREATE: A user can only create their own document.
      allow create: if isOwner(userId);
        
      // UPDATE:
      // A user can only update their own document.
      // They CANNOT update protected fields like walletBalance, kycStatus, wins, losses, or selfExclusion.
      // These must be updated by a trusted backend function.
      allow update: if isOwner(userId) && 
                      request.resource.data.walletBalance == resource.data.walletBalance &&
                      request.resource.data.kycStatus == resource.data.kycStatus &&
                      request.resource.data.wins == resource.data.wins &&
                      request.resource.data.losses == resource.data.losses &&
                      request.resource.data.selfExclusion == resource.data.selfExclusion;
    }
    
    // --- Bets Collection ---
    match /bets/{betId} {
        // READ: Anyone can read public bet information.
        allow read: if true;

        // CREATE: Only authenticated users can create a bet.
        allow create: if request.auth != null;

        // UPDATE (Match Bet):
        // - A user can only accept a bet if they are not the creator and the bet is 'open'.
        // - Admins/Server can update bets for settlement/dispute resolution.
        allow update: if isServer() || isAdmin() || 
                      (request.auth != null &&
                       request.resource.data.status == 'matched' &&
                       resource.data.status == 'open' &&
                       request.resource.data.challengerId == request.auth.uid);
    }

    // --- Transactions Collection ---
    match /transactions/{transactionId} {
        // READ: Users can only read their own transactions. Admins can read all.
        allow read: if request.auth != null && (isAdmin() || request.resource.data.userId == request.auth.uid);
        
        // WRITE: No client-side writes allowed. All transactions must be created by the backend.
        allow write: if false;
    }
    
    // --- User Bets Subcollection ---
    match /users/{userId}/userBets/{betId} {
        // READ: A user can read their own subcollection of bet references.
        allow read: if isOwner(userId);

        // WRITE: No client-side writes allowed. All records must be created by the backend.
        allow write: if false;
    }
  }
}
