
rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {
  
    function isUserAuthenticated() {
      return request.auth != null;
    }

    function isOwner(userId) {
      return request.auth.uid == userId;
    }
    
    function isNotSelfExcluded() {
      let userDoc = get(/databases/$(database)/documents/users/$(request.auth.uid)).data;
      // If selfExclusion doesn't exist or isActive is false, allow.
      return !('selfExclusion' in userDoc) || userDoc.selfExclusion.isActive == false;
    }

    // Users can read their own profile, and update certain fields.
    // Sensitive fields (balance, kyc, etc.) are only updated by backend functions.
    match /users/{userId} {
      allow read, get: if isUserAuthenticated();
      allow update: if isOwner(userId) && isNotSelfExcluded(); 
      allow create: if isUserAuthenticated();
    }

    // Bets can be read by anyone if they are public.
    // Creating or matching a bet (write) requires the user to not be self-excluded.
    match /bets/{betId} {
      allow read, get: if true;
      allow write: if isUserAuthenticated() && isNotSelfExcluded();
    }
    
    // Transactions can only be read by the owner.
    // They are only created by backend functions.
    match /transactions/{transactionId} {
        allow read, get: if isUserAuthenticated() && get(/databases/$(database)/documents/transactions/$(transactionId)).data.userId == request.auth.uid;
        allow list: if isUserAuthenticated(); // Requires query constraints on client
    }
    
    // User-specific subcollections can only be accessed by the owner.
    match /users/{userId}/{document=**} {
        allow read, write, create, delete: if isOwner(userId);
    }
  }
}
