rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // Users can only read/write their own profile.
    // Critical fields like walletBalance cannot be modified by the client.
    match /users/{userId} {
      allow read, update: if request.auth != null && request.auth.uid == userId;
      allow create: if request.auth != null;

      // Disallow client-side modification of sensitive fields.
      allow update: if request.resource.data.walletBalance == resource.data.walletBalance &&
                       request.resource.data.wins == resource.data.wins &&
                       request.resource.data.losses == resource.data.losses;
    }
    
    // Admins can read user data.
    match /users/{userId} {
       allow get: if request.auth.token.admin == true;
    }

    // Rules for the 'bets' collection
    match /bets/{betId} {
      // Anyone can read public, open bets. Matched bets are visible to participants.
      allow read: if resource.data.isPublic == true ||
                      (request.auth != null && (request.auth.uid == resource.data.creatorId || request.auth.uid == resource.data.challengerId));

      // Users can only create bets for themselves.
      allow create: if request.auth != null && request.auth.uid == request.resource.data.creatorId;

      // A user can only "match" a bet (write to a 'bet' document to become the taker)
      // if they are authenticated, not the creator, and the bet is 'open'.
      // Updates are handled by the `matchBet` Cloud Function.
      allow update: if request.auth != null &&
                       request.auth.uid != resource.data.creatorId &&
                       resource.data.status == 'open';
    }

    // Rules for the 'userBets' subcollection
    match /users/{userId}/userBets/{betId} {
        // A user can only read their own bet references.
        allow read: if request.auth != null && request.auth.uid == userId;
        // Creation is handled by server-side functions.
        allow write: if false;
    }
    
    // Transactions are created by server-side functions and should be immutable.
    match /transactions/{transactionId} {
      allow read: if request.auth != null && request.auth.uid == resource.data.userId;
      allow write: if false; // All transactions written by backend.
    }
    
    // Disputes can be read by participants or admins.
    match /disputes/{disputeId} {
       allow read: if request.auth != null && (request.auth.uid == resource.data.creatorId || request.auth.uid == resource.data.takerId || request.auth.token.admin == true);
       // Creation/updates handled by backend or admin tools.
       allow write: if request.auth != null; 
    }
  }
}
