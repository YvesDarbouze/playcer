rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {
  
    // Helper functions
    function isAuth() {
      return request.auth != null;
    }
    
    function isUser(userId) {
      return isAuth() && request.auth.uid == userId;
    }
    
    function isAdmin() {
      return isAuth() && request.auth.token.admin == true;
    }
    
    match /users/{userId} {
      // Any authenticated user can create their own user document.
      allow create: if isUser(userId);
      
      // A user can read their own document. An admin can read any document.
      allow get: if isUser(userId) || isAdmin();
      
      // For public profiles, any authenticated user can list user documents,
      // but client-side code must be responsible for only showing public fields.
      allow list: if isAuth();

      // A user can only update their own document.
      // They cannot update their wallet, KYC status, wins, or losses.
      allow update: if isUser(userId) 
        && request.resource.data.walletBalance == resource.data.walletBalance
        && request.resource.data.kycStatus == resource.data.kycStatus
        && request.resource.data.wins == resource.data.wins
        && request.resource.data.losses == resource.data.losses;
    }

    match /bets/{betId} {
      allow get, list: if true; // Bets are public
      allow create: if isAuth();
      
      // Users can only "match" a bet if they are not the creator and the bet is 'open'.
      // Updates to 'settled', 'void', 'disputed' should happen server-side.
      allow update: if isAuth() 
        && request.resource.data.challengerId == request.auth.uid
        && resource.data.status == 'open'; 
    }

    match /transactions/{txId} {
      // Users can only read their own transactions.
      allow list: if isAuth() && request.query.where[0][2] == request.auth.uid;
      // No one can write to transactions from the client.
      allow write: if false;
    }

    match /disputes/{disputeId} {
      // Only involved parties or admins can read/write disputes.
      // Placeholder for more granular rules.
      allow read, write: if isAuth() && (
        resource.data.creatorId == request.auth.uid ||
        resource.data.takerId == request.auth.uid ||
        isAdmin()
      );
    }
  }
}
