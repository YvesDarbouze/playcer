
rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // Helper function to check if a user is signed in
    function isSignedIn() {
      return request.auth != null;
    }

    // Helper function to check if the user is the owner of a document
    function isOwner(userId) {
      return request.auth.uid == userId;
    }

    // Users can read/update their own profile.
    // Public profiles are readable by any signed-in user.
    match /users/{userId} {
      allow read: if isSignedIn();
      allow update: if isOwner(userId);
      allow create: if isOwner(userId);
    }

    // Games and their odds are public read-only for clients.
    // Only backend functions can write to this collection.
    match /games/{gameId} {
      allow read: if isSignedIn();
      allow write: if false; // Only backend has access

      match /bookmaker_odds/{bookmakerId} {
        allow read: if isSignedIn();
        allow write: if false; // Only backend has access
      }
    }
    
    // Bets have more complex rules
    match /bets/{betId} {
      // Allow create for any authenticated user
      allow create: if isSignedIn();

      // Allow read if the bet is public OR the user is the creator or taker
      allow read: if isSignedIn() && (resource.data.isPublic == true || resource.data.creatorId == request.auth.uid || resource.data.takerId == request.auth.uid);

      // Allow update for two scenarios:
      // 1. A taker is accepting a bet (status goes from 'pending' to 'accepted')
      // 2. The backend is resolving the bet
      allow update: if isSignedIn() && 
                       (request.resource.data.status == 'accepted' && 
                        resource.data.status == 'pending' && 
                        request.resource.data.takerId == request.auth.uid);
      
      // No client-side deletes
      allow delete: if false;
    }

    // Transactions are private to each user
    match /transactions/{txId} {
        allow read, write: if isOwner(resource.data.userId);
        allow create: if isOwner(request.resource.data.userId);
    }
  }
}
